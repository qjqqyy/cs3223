package qp.parser;

import qp.utils.*;
import java_cup.runtime.*;
import java.util.*;

//import SMA5503.IR.*;

/* user code portion  */
parser code {: 
	
	public SQLQuery query;
	
	public SQLQuery getSQLQuery() {
		return query;
	}

	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
  	/* stop parsing (not really necessary since we throw an exception, but) */
  	done_parsing();
  	
  	/* use the normal error message reporting to put out the message */
  	report_error("Fatal error occurred, stop parsing.", info);
	}
	
	public void syntax_error(Symbol cur_token){}
	
:}

action code {:

:}


/* Terminals (tokens returned by the scanner). */
terminal TokenValue ID;
terminal COMMA,LEFTBRACKET,RIGHTBRACKET,DOT,STAR;
terminal LESSTHAN,GREATERTHAN,LTOE,GTOE,EQUAL,NOTEQUAL;
terminal SELECT,FROM,WHERE,GROUPBY,ORDERBY,MAX,MIN,SUM,COUNT,AVG,DISTINCT;
terminal TokenValue STRINGLIT;

/* Non terminals */
nonterminal SQLQuery finalquery;
nonterminal SQLQuery sqlquery;
nonterminal ArrayList attlist;
nonterminal Attribute attribute;
nonterminal ArrayList tablelist;
nonterminal ArrayList conditionlist;
nonterminal Condition condition;
nonterminal Condition op;

/* The grammar */
finalquery ::= sqlquery:s
		{:
			parser.query = s;
			RESULT = s;
		:}
		| sqlquery:s GROUPBY attlist:a
        {:
            s.setGroupByList(a);
			parser.query = s;
            RESULT = s;
        :}
        |  sqlquery:s ORDERBY attlist:a
        {:
            s.setOrderByList(a);
            parser.query = s;
            RESULT = s;
        :}
        | sqlquery:s GROUPBY attlist:a ORDERBY attlist:b
        {:
            s.setGroupByList(a);
            s.setOrderByList(b);
            parser.query = s;
            RESULT = s;
        :}
		;

sqlquery ::= SELECT attlist:a FROM tablelist:t WHERE conditionlist:c
		{:
			SQLQuery sq = new SQLQuery(a,t,c);
			RESULT = sq;
		:}
	    | SELECT STAR FROM tablelist:t WHERE conditionlist:c
		{:
			ArrayList<Attribute> a = new ArrayList<>();
			SQLQuery sq = new SQLQuery(a,t,c);
			RESULT = sq;
		:}	
	    | SELECT attlist:a FROM tablelist:t
		{:
			SQLQuery sq = new SQLQuery(a,t);
			RESULT = sq;
		:}
	    | SELECT STAR FROM tablelist:t
		{:
			ArrayList<Attribute> a = new ArrayList<>();
			SQLQuery sq = new SQLQuery(a,t);
			RESULT = sq;
		:}
		| SELECT DISTINCT attlist:a FROM tablelist:t WHERE conditionlist:c
		{:
			SQLQuery sq = new SQLQuery(a,t,c);
			sq.setIsDistinct(true);
			RESULT = sq;
		:}
	    | SELECT DISTINCT STAR FROM tablelist:t WHERE conditionlist:c
		{:
			ArrayList<Attribute> a = new ArrayList<>();
			SQLQuery sq = new SQLQuery(a,t,c);
			sq.setIsDistinct(true);
			RESULT = sq;
		:}	
		| SELECT DISTINCT attlist:a FROM tablelist:t
		{:
			SQLQuery sq = new SQLQuery(a,t);
			sq.setIsDistinct(true);
			RESULT = sq;
		:}
		| SELECT DISTINCT STAR FROM tablelist:t 
		{:
			ArrayList<Attribute> a = new ArrayList<>();
			SQLQuery sq = new SQLQuery(a,t);
			sq.setIsDistinct(true);
			RESULT = sq;
		:}
		;

attlist ::= attlist:as COMMA attribute:a
		{:
			as.add(a);
			RESULT = as;
	    :}
		| attribute:at 
		{:
			ArrayList<Attribute> v = new ArrayList<>();
			v.add(at);
			RESULT = v;
		:}
		;

tablelist ::= tablelist:tlist COMMA ID:i
		{:
			tlist.add(i.text());
			RESULT = tlist;
		:}
		| ID:i
	    {:
			ArrayList<String> tlist = new ArrayList<>();
			tlist.add(i.text());
			RESULT = tlist;
		:}
		;

conditionlist ::= conditionlist:clist COMMA condition:c
		{:
			clist.add(c);
			RESULT = clist;
		:}
		| condition:c
		{:
			ArrayList<Condition> clist = new ArrayList<>();
			clist.add(c);
			RESULT = clist;
		:}
		;


condition ::= attribute:at op:o STRINGLIT:s
		{:
			Condition c = new Condition(at,o.getExprType(),s.text());
			c.setOpType(Condition.SELECT);
			RESULT = c;
		:}
		| attribute:a1 op:o attribute:a2
		{:
			Condition c = new Condition(a1,o.getExprType(),a2);
			c.setOpType(Condition.JOIN);
			RESULT = c;
		:}	
		| attribute:at error:p
		{:
			System.out.println("syntax error: incorrect condition");
			System.exit(0);
		:}
		| error:p STRINGLIT:s
		{:
			System.out.println("syntax error: incorrect condition:"+s.text());
			System.exit(0);
		:}	
		;
		
attribute ::= ID:i1 DOT ID:i2
		{:
			RESULT = new Attribute(i1.text(),i2.text());
		:}
		| MAX LEFTBRACKET attribute:at RIGHTBRACKET
		{:
			at.setAggType(Attribute.MAX);
			RESULT = at;
		:}
		| MIN LEFTBRACKET attribute:at RIGHTBRACKET
		{:
			at.setAggType(Attribute.MIN);
			RESULT = at;
		:}
		| SUM LEFTBRACKET attribute:at RIGHTBRACKET
		{:
			at.setAggType(Attribute.SUM);
			RESULT = at;
		:}
		| COUNT LEFTBRACKET attribute:at RIGHTBRACKET
		{:
			at.setAggType(Attribute.COUNT);
			RESULT = at;
		:}
		| AVG LEFTBRACKET attribute:at RIGHTBRACKET
		{:
			at.setAggType(Attribute.AVG);
			RESULT = at;
		:}
		| ID:i error:p
		{:
			System.out.println("syntax error: incorrect attribute:"+ i.text());
			System.exit(0);
		:}
		;

op ::= LESSTHAN
		{:
			RESULT = new Condition(Condition.LESSTHAN);
		:}
		| GREATERTHAN
		{:
			RESULT = new Condition(Condition.GREATERTHAN);
		:}
		| LTOE
		{:
			RESULT = new Condition(Condition.LTOE);
		:}
		| GTOE
		{:
			RESULT = new Condition(Condition.GTOE);
		:}
		| NOTEQUAL
		{:	
		  RESULT = new Condition(Condition.NOTEQUAL);
		:}
		| EQUAL
		{:
			RESULT = new Condition(Condition.EQUAL);
		:}
		;	
